@page "/shapes"

@using BlazorLeaflet
@using BlazorLeaflet.Models
@using BlazorLeaflet.Models.Events
@inject IJSRuntime jsRuntime
@using System.Diagnostics;
@using BlazorLeaflet.Samples.Data
@using System.Drawing

<h1>Blazor Leaflet </h1>


<div style="height: 500px; width: 1000px; padding-top: 20px; padding-bottom: 20px">
    <LeafletMap Map="_map" />
</div>

<div class="pt-3">
    <DrawZoneToggleButton ButtonText="Draw Polygon" DrawHandler="_drawHandler" OnToggleCallback="_drawHandler.OnDrawPolygonToggle" />
</div>

@code
{
    enum DrawState
    {
        None,
        DrawingRectangle,
        DrawingCircle,
        DrawingPolygon
    }
    private Map _map;
    [Parameter] public DrawHandler _drawHandler { get; set; }
    private LatLng _markerLatLng = new LatLng { Lat = 47.5574007f, Lng = 16.3918687f };
    readonly IJSRuntime _jsRuntime;
    readonly Polygon _polygon = new Polygon();
    readonly List<MouseEvent> _mouseClickEvents = new List<MouseEvent>();
    DrawState _drawState;

    public event EventHandler DrawFinished;

    protected override void OnInitialized()
    {
        _polygon.StrokeColor = Color.Black;
        _polygon.StrokeWidth = 1;
        _polygon.Fill = true;
        _polygon.FillColor = Color.Red;

        _map = new Map(jsRuntime)
        {
            Center = _markerLatLng,
            Zoom = 4.8f
        };

        _map.OnInitialized += () =>
        {
            _map.AddLayer(new TileLayer
            {
                UrlTemplate = "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png",
                Attribution = "&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors",
            });
        };

        _drawHandler = new DrawHandler(_map, jsRuntime);

    }

    private void OnDrag(BlazorLeaflet.Models.Marker marker, DragEvent evt)
    {
        _markerLatLng = evt.LatLng;
        StateHasChanged();
    }

    private async void OnDragEnd(BlazorLeaflet.Models.Marker marker, Event e)
    {
        marker.Position = _markerLatLng;
        marker.Popup.Content = string.Format("I am now at {0:0.00}° lat, {1:0.00}° lng", _markerLatLng.Lat, _markerLatLng.Lng);
        await LeafletInterops.UpdatePopupContent(jsRuntime, _map.Id, marker);
    }
}